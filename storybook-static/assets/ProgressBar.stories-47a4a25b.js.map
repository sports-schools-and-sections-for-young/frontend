{"version":3,"file":"ProgressBar.stories-47a4a25b.js","sources":["../../src/utils/constants/stepsData.ts","../../src/components/ProgressBar/ProgressBar.tsx"],"sourcesContent":["import { IconTypes } from \"../../components/ui/Icon/types\";\nimport { StepData } from \"../../components/ProgressBar/types\";\n\nexport const stepsData: StepData[] = [\n  { id: 1, iconType: IconTypes.BALL },\n  { id: 2, iconType: IconTypes.PERSON },\n  { id: 3, iconType: IconTypes.LOCATION },\n  { id: 4, iconType: IconTypes.COINS },\n];\n","import React, { useCallback } from \"react\";\nimport { IconSize, IconColor } from \"../ui/Icon/types\";\nimport Icon from \"../ui/Icon/Icon\";\nimport { stepsData } from \"../../utils/constants/stepsData\";\nimport styles from \"./ProgressBar.module.scss\";\nimport { ProgressBarProps } from \"./types\";\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ currentStep, setStep }) => {\n  const handleStepClick = useCallback(\n    (stepId: number) => {\n      setStep(stepId);\n    },\n    [setStep],\n  );\n\n  const getButtonClass = (stepId: number) => {\n    if (stepId === currentStep) {\n      return `${styles.icon} ${styles.active}`;\n    }\n    if (stepId < currentStep) {\n      return `${styles.icon} ${styles.complete}`;\n    }\n    return `${styles.icon} ${styles.incomplete}`;\n  };\n\n  const getIconColor = (stepId: number) => {\n    if (stepId === currentStep) {\n      return IconColor.PRIMARY;\n    }\n    if (stepId < currentStep) {\n      return IconColor.SECONDARY;\n    }\n    return IconColor.PALE;\n  };\n\n  const renderLine = (stepId: number) => {\n    const lineClass =\n      stepId <= currentStep\n        ? `${styles.line} ${styles[\"line-complete\"]}`\n        : styles.line;\n    return <div key={`line-${stepId}`} className={lineClass} />;\n  };\n\n  return (\n    <div className={styles.progressBar}>\n      {stepsData.flatMap((stepData, index) => [\n        index > 0 ? renderLine(stepData.id) : null,\n        <button\n          key={stepData.id}\n          className={getButtonClass(stepData.id)}\n          onClick={() => handleStepClick(stepData.id)}\n          type=\"button\"\n        >\n          <Icon\n            type={stepData.iconType}\n            size={IconSize.NORMAL}\n            color={getIconColor(stepData.id)}\n          />\n        </button>,\n      ])}\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"],"names":["stepsData","IconTypes","ProgressBar","currentStep","setStep","handleStepClick","useCallback","stepId","getButtonClass","styles","getIconColor","IconColor","renderLine","lineClass","jsx","stepData","index","Icon","IconSize","ProgressBar$1"],"mappings":"qNAGO,MAAMA,EAAwB,CACnC,CAAE,GAAI,EAAG,SAAUC,EAAU,IAAK,EAClC,CAAE,GAAI,EAAG,SAAUA,EAAU,MAAO,EACpC,CAAE,GAAI,EAAG,SAAUA,EAAU,QAAS,EACtC,CAAE,GAAI,EAAG,SAAUA,EAAU,KAAM,CACrC,gRCDAC,EAAA,CAAA,CAAA,YAAAC,EAAA,QAAAC,KAAA,CACE,MAAAC,EAAAC,EAAA,YAAwBC,GAAA,CAEpBH,EAAAG,CAAA,CAAc,EAChB,CAAAH,CAAA,CACQ,EAGVI,EAAAD,GACEA,IAAAJ,EACE,GAAAM,EAAA,IAAA,IAAAA,EAAA,MAAA,GAEFF,EAAAJ,EACE,GAAAM,EAAA,IAAA,IAAAA,EAAA,QAAA,GAEF,GAAAA,EAAA,IAAA,IAAAA,EAAA,UAAA,GAGFC,EAAAH,GACEA,IAAAJ,EACEQ,EAAA,QAEFJ,EAAAJ,EACEQ,EAAA,UAEFA,EAAA,KAGFC,EAAAL,GAAA,CACE,MAAAM,EAAAN,GAAAJ,EAAA,GAAAM,EAAA,IAAA,IAAAA,EAAA,eAAA,CAAA,GAAAA,EAAA,KAIA,OAAAK,EAAA,IAAA,MAAA,CAAA,UAAAD,CAAA,EAAA,QAAAN,CAAA,EAAA,CAAyD,EAG3D,OAAAO,MAAA,MAAA,CAAA,UAAAL,EAAA,YAAA,SAAAT,EAAA,QAAA,CAAAe,EAAAC,IAAA,CAE4CA,EAAA,EAAAJ,EAAAG,EAAA,EAAA,EAAA,KACAD,EAAA,IACtC,SAAC,CAAA,UAAAN,EAAAO,EAAA,EAAA,EAEsC,QAAA,IAAAV,EAAAU,EAAA,EAAA,EACK,KAAA,SACrC,SAAAD,EAAA,IAELG,EAAC,CAAA,KAAAF,EAAA,SACgB,KAAAG,EAAA,OACA,MAAAR,EAAAK,EAAA,EAAA,CACgB,CAAA,CACjC,EAAAA,EAAA,EATc,CAUhB,CAAA,CAAA,CAAA,CAIR,EAEAI,EAAAjB;;;"}